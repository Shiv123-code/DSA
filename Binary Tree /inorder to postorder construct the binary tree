class Solution {
    private:
      void createmap(vector<int>&inorder,map<int,int> &nodetoindex,int n){
        for(int i=0;i<n;i++){
            nodetoindex[inorder[i]]=i;
        }
        }
    TreeNode *slove(vector<int> &inorder,vector<int>&postorder,int &index,int inorderstart,int inorderend,int n,map<int,int> &nodetoindex){
        if(index < 0 || inorderstart>inorderend){
            return NULL;
        }
        int element=postorder[index--];
        TreeNode *root=new TreeNode(element);
        int pos=nodetoindex[element];
       //root left
       
       root->right=slove(inorder,postorder,index,pos+1,inorderend,n,nodetoindex);
       root->left=slove(inorder,postorder,index,inorderstart,pos-1,n,nodetoindex);

       return root;
       }
    public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
            int n=postorder.size();
            int postorderindex=n-1;
            //int n=postorder.size();
            map<int,int> nodetoindex;
            createmap(inorder,nodetoindex,n);
            TreeNode* ans=slove(inorder,postorder,postorderindex,0,n-1,n,nodetoindex);
            return ans;
    }
};
