class Solution {
public:
    void addsolution(vector<vector<string>> &ans , vector<vector<char>>&board,int n){
        vector<string> temp;
        for(int i=0;i<n;i++){
            string str="";
            for(int j=0;j<n;j++){
                str+=board[i][j];
            }
            temp.push_back(str);
        }
        ans.push_back(temp);
        return;
    }
    bool issafe(int row,int col , vector<vector<char>> &board,int n){
        int x=row;
        int y=col;
        while(y>=0){
            if(board[x][y]=='Q'){
                return false;
            }
            y--;
        }
        x=row;
        y=col;
        while(x>=0 && y>=0){
            if(board[x][y]=='Q'){
                return false;
            }
            x--;
            y--;
        }
        x=row;
        y=col;
        while(x<n && y>=0){
            if(board[x][y]=='Q'){
                return false;
            }
             x++;
                y--;
        }
        return true;
    }
    void slove(int col, vector<vector<string>> &ans,vector<vector<char>>&board,int n){
            //base case
            if(col==n){
                addsolution(ans,board,n);
                return;
            }
            for(int row=0;row<n;row++){
                if(issafe(row,col,board,n)){
                    board[row][col]='Q';
                    slove(col+1,ans,board,n);
                    board[row][col]='.';
                }
            }
    }
    vector<vector<string>> solveNQueens(int n) {
          vector<vector<char>> board(n,vector<char>(n,'.'));
          vector<vector<string>> ans;
          slove(0,ans,board,n);
          return ans;
    }
};
