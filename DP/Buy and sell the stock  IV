class Solution {
public:
     int slove (int index,int operationno,int k,vector<int>& prices, vector<vector<int>> &dp){
       if(index==prices.size())
        return 0;
        if(operationno==2*k)
        return 0;
        if(dp[index][operationno]!=-1)
        {
            return dp[index][operationno];
        }
        int profit=0;
        if(operationno%2==0){
            int buykaro=-prices[index]+slove(index+1,operationno+1,k,prices,dp);
            int skipkaro=0+slove(index+1,operationno,k,prices,dp);
            profit=max(buykaro,skipkaro); 
        }
        else{
            int sellkaro=prices[index]+slove(index+1,operationno+1,k,prices,dp);
            int skipkaro=0+slove(index+1,operationno,k,prices,dp);
            profit=max(sellkaro,skipkaro);
        }
        return dp[index][operationno]=profit;
     }
    // bottom up approches
     int slovetab(int k,vector<int>& prices){
        int n=prices.size();
         vector<vector<int>> dp(n+1,vector<int>(2*k+1,0));
         for(int index=n-1;index>=0;index--){
            for(int operationNo=0;operationNo<2*k;operationNo++){
                int profit=0;
                if(operationNo%2==0){
            int buykaro=-prices[index]+dp[index+1][operationNo+1];
            int skipkaro=0+dp[index+1][operationNo];
            profit=max(buykaro,skipkaro); 
        }
        else{
            int sellkaro= prices[index]+ dp[index+1][operationNo+1];
            int skipkaro=0+dp[index+1][operationNo];
            profit=max(sellkaro,skipkaro);
        }
            dp[index][operationNo]=profit;
            }
         }
         return dp[0][0];
     }
     //space optimization
      int slovespace(int k,vector<int>& prices){
        int n=prices.size();
       //  vector<vector<int>> dp(n+1,vector<int>(2*k+1,0));
         vector<int> curr(2*k+1,0);
         vector<int> next(2*k+1,0);
         for(int index=n-1;index>=0;index--){
            for(int operationNo=0;operationNo<2*k;operationNo++){
                int profit=0;
                if(operationNo%2==0){
            int buykaro=-prices[index]+next[operationNo+1];
            int skipkaro=0+next[operationNo];
            profit=max(buykaro,skipkaro); 
        }
        else{
            int sellkaro= prices[index]+ next[operationNo+1];
            int skipkaro=0+next[operationNo];
            profit=max(sellkaro,skipkaro);
        }
            curr[operationNo]=profit;
            }
            next=curr;
         }
         return next[0];
     }
    int maxProfit(int k, vector<int>& prices) {
       // int n=prices.size();
       // vector<vector<int>> dp(n,vector<int>(2*k,-1));
       // return slove (0,0,k,prices,dp);
       //return slovetab(k,prices);
       return slovespace(k,prices);
    }
};
