class TrieNode{
      public:
      TrieNode* children[26];
      bool isterminal;
      TrieNode(){;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        isterminal=false;
      }
};
class Trie {
     public:
    TrieNode* root;
public:
    Trie() {
        root= new TrieNode();
    }
     void insertutil(TrieNode* root, string word){
         if(word.length()==0){
            root->isterminal=true;
            return ;
         }
         int index=word[0]-'a';
         TrieNode* child =root;
         //present
         if(root->children[index]!=NULL){
            child=root->children[index];
         }
         //absent
         else{
             child=new TrieNode() ;
             root->children[index]=child;
         }
         insertutil(child,word.substr(1));
    }
    void insert(string word) {
          insertutil(root,word);
    }
     bool searchi(TrieNode* root,string word){
        if(word.length()==0){
            return root->isterminal;
        }
        int index=word[0]-'a';
        TrieNode*child;
        if(root->children[index]!=NULL){
           child=root->children[index];
        }
        else{
            return false;
        }
        return  searchi(child,word.substr(1));
     }
    
    bool search(string word) {
         return searchi(root,word);
    }
    bool prefixi(TrieNode* root,string word){
        if(word.length()==0){
            return true;
        }
        int index=word[0]-'a';
        TrieNode*child;
        if(root->children[index]!=NULL){
           child=root->children[index];
        }
        else{
            return false;
        }
        return  prefixi(child,word.substr(1));
     }
    bool startsWith(string prefix) {
         return prefixi(root,prefix) ;
    }
};
