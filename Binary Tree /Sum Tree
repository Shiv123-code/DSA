class Solution {
      private:
    pair<bool, int> isSumTreeFast(Node* root) {
        //base case
        if(root == NULL) {
            pair<bool, int> p = make_pair(true, 0);
            return p;
        }
        //leaf node
        if(root->left == NULL && root->right == NULL) {
            pair<bool, int> p = make_pair(true, root->data);
            return p;
        }
        
        pair<bool, int> left = isSumTreeFast(root->left);
        pair<bool, int> right = isSumTreeFast(root->right);
        
        bool leftAns = left.first;
        bool rightAns = right.first;
        
        bool cond = root->data == left.second + right.second;
        
        pair<bool, int> ans;
        if(leftAns && rightAns && cond) {
            ans.first = true;
            ans.second = root->data + left.second + right.second;
        }
        else {
            ans.first = false;
        }
        
        return ans;
    }

  public:
    bool isSumTree(Node* root) {
        // Your code here
        return isSumTreeFast(root).first;
    }
};
