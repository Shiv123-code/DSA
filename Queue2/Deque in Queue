#include <bits/stdc++.h> 
class Deque
{
public:
    // Initialize your data structure.
    int *arr;
    int size;
    int front;
    int rear;
    Deque(int n)
    {
        // Write your code here.
        size=n;
        arr=new int(size);
        front=-1;
        rear=-1;
    
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x) {
        if ((front == 0 && rear == size - 1) || (front != 0 && rear == (front - 1) % (size - 1))) {
            // Deque is full
            return false;
        }
        if (front == -1) { 
            // First element to push
            front = rear = 0;
        } else if (front == 0 && rear != size - 1) { 
            // Wrap around
            front = size - 1;
        } else {
            front--;
        }
        arr[front] = x;
        return true;
    }

    // Pushes 'X' to the rear of the deque
    bool pushRear(int x) {
        if ((front == 0 && rear == size - 1) || (front != 0 && rear == (front - 1) % (size - 1))) {
            // Deque is full
            return false;
        }
        if (front == -1) {
            // First element to push
            front = rear = 0;
        } else if (rear == size - 1 && front != 0) {
            // Wrap around
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = x;
        return true;
    }

    // Pops an element from the front
    int popFront() {
        if (front == -1) {
            // Deque is empty
            return -1;
        }

        int ans = arr[front];
        arr[front] = -1; // Optional: Clear the dequeued position

        if (front == rear) {
            // Deque becomes empty
            front = rear = -1;
        } else if (front == size - 1) {
            // Wrap around
            front = 0;
        } else {
            front++;
        }
        return ans;
    }

    // Pops an element from the rear
    int popRear() {
        if (front == -1) {
            // Deque is empty
            return -1;
        }

        int ans = arr[rear];
        arr[rear] = -1; // Optional: Clear the dequeued position

        if (front == rear) {
            // Deque becomes empty
            front = rear = -1;
        } else if (rear == 0) {
            // Wrap around
            rear = size - 1;
        } else {
            rear--;
        }
        return ans;
    }

    // Returns the first element
    int getFront() {
        if (front == -1) {
            return -1; // Deque is empty
        }
        return arr[front];
    }

    // Returns the last element
    int getRear() {
        if (front == -1) {
            return -1; // Deque is empty
        }
        return arr[rear];
    }

    // Checks if the deque is empty
    bool isEmpty() {
        return (front == -1);
    }

    // Checks if the deque is full
    bool isFull() {
        return ((front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1)));
    }
};
