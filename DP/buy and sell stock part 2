class Solution {
public:
    int slove(int index, int buy , vector<int> & prices,vector<vector<int>>&dp){
        if(index==prices.size())
        return 0;
        if(dp[index][buy]!=-1)
        {
            return dp[index][buy];
        }
        int profit=0;
        if(buy){
            int buykaro=-prices[index]+slove(index+1,0,prices,dp);
            int skipkaro=0+slove(index+1,1,prices,dp);
            profit=max(buykaro,skipkaro);
        }
        else{
            int sellkaro=prices[index]+slove(index+1,1,prices,dp);
            int skipkaro=0+slove(index+1,0,prices,dp);
            profit=max(sellkaro,skipkaro);
        }
        return dp[index][buy]=profit;
    }
    //bottom-up approches
    int slovetab(vector<int>& prices){
        int n=prices.size();
        vector<vector<int> > dp(n+1,vector<int>(2,0));
        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                 int profit=0;
              if(buy){
            int buykaro=-prices[index]+dp[index+1][0];
            int skipkaro=0+dp[index+1][1];
            profit=max(buykaro,skipkaro);
             }
             else{
            int sellkaro=prices[index]+dp[index+1][1];
            int skipkaro=0+dp[index+1][0];
            profit=max(sellkaro,skipkaro);
            }
            dp[index][buy]=profit;
        }
        }
        return dp[0][1];
    }
    // time optimzation
    int sloveso(vector<int>& prices){
        int n=prices.size();
       // vector<vector<int> > dp(n+1,vector<int>(2,0));
       vector<int> curr(2,0);
       vector<int> next(2,0);
        for(int index=n-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                 int profit=0;
              if(buy){
            int buykaro=-prices[index]+next[0];
            int skipkaro=0+next[1];
            profit=max(buykaro,skipkaro);
             }
             else{
            int sellkaro=prices[index]+next[1];
            int skipkaro=0+next[0];
            profit=max(sellkaro,skipkaro);
            }
            curr[buy]=profit;
        }
        next=curr;
        }
        return next[1];
    }
    int maxProfit(vector<int>& prices) {
        //int n=prices.size();
       // vector<vector<int> > dp(n,vector<int>(2,-1));
       // return slove (0,1,prices,dp);
      // return slovetab(prices);
      return sloveso(prices);
    }
};
