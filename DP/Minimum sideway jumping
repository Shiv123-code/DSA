class Solution {
public: 
      /* int slovemem(vector<int>& obstacles,int currlane,int currpos,vector<vector<int>> &dp)  {
        int n=obstacles.size()-1;
        if(currpos==n){
            return 0;      
        }
        if(dp[currlane][currpos]!=-1){
            return dp[currlane][currpos];
        }
        if(obstacles[currpos+1]!=currlane){
            return slovemem(obstacles,currlane,currpos+1,dp);
        }
        else{
            int ans=INT_MAX;
            for(int i=1;i<=3;i++){
               if(currlane!=i && obstacles[currpos]!=i){
                 ans =min(ans,1+slovemem(obstacles,i,currpos,dp));
               }
            }
            dp[currlane][currpos]=ans;
            return dp[currlane][currpos];
        }
     }*/

    int minSideJumps(vector<int>& obstacles) {
       // vector<vector<int>> dp(4,vector<int>(obstacles.size(),-1));
       // return slovemem(obstacles,2,0,dp);
    }
};
int minSideJumps(vector<int> &obstacles){
            int n = obstacles.size();
            vector<int> curr(3, 1e9), prev(3, 0);
            for (int idx = n - 2; idx >= 0; idx--){
                for (int currLane = 0; currLane <= 2; currLane++){
                    if (obstacles[idx+1] != currLane +1) curr[currLane] = prev[currLane];
                    else{
                        int mn = 1e9;
                        for (int i = 0; i <= 2; i++){
                            if (i != currLane && obstacles[idx] != i + 1){
                                mn = min(mn, 1 + prev[i]);
                            }
                        }
                        curr[currLane] = mn;
                    }
                }
                prev = curr;
            }
            return min(prev[1], 1 + min(prev[0], prev[2]));
    }
