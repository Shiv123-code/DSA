class Solution {
    private:
     void inseartattail(Node*&head,Node*&tail,int d)
     {
        Node* newnode= new Node(d);
        if(head==NULL)
        {
           head=newnode;
           tail=newnode;
           return;
        }
        else
        {
           tail->next=newnode;
           tail=newnode;
        }
     }
public:
    Node* copyRandomList(Node* head) {
        // steps 1 create a clone
        Node*clonehead=NULL;
        Node*clonetail=NULL;
        Node*temp=head;
        while(temp!=NULL)
        {
            inseartattail(clonehead,clonetail,temp->val);
            temp=temp->next;
        }
        unordered_map<Node*,Node*> Oldtonewnode;
        Node*OriginalNode=head;
        Node*cloneNode=clonehead;
        while(OriginalNode!=NULL && cloneNode!=NULL)
        {
            Oldtonewnode[OriginalNode]=cloneNode;
            OriginalNode=OriginalNode->next;
            cloneNode=cloneNode->next;
        }
        OriginalNode=head;
        cloneNode=clonehead;
        while(OriginalNode!=NULL)
        {
            cloneNode->random=Oldtonewnode[OriginalNode->random];
            OriginalNode=OriginalNode->next;
            cloneNode=cloneNode->next;
        }
        return clonehead;
    }
};
