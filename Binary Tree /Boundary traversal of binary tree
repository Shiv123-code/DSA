class Solution {
   public:
    void traversalleft(Node* root,vector<int> &ans){
         if((root==NULL)|| (root->left==NULL && root->right==NULL)){
             return;
         }
         ans.push_back(root->data);
         if(root->left){
             traversalleft(root->left,ans);
         }
         else{
              traversalleft(root->right,ans);
         }
    }
    void traversalleaf(Node*root,vector<int> &ans){
        if(root==NULL){
            return ;
        }
        if(root->left==NULL && root->right==NULL){
            ans.push_back(root->data);
            return;
        }
        traversalleaf(root->left,ans);
        traversalleaf(root->right,ans);
    }
    void traversalRight(Node*root,vector<int> &ans){
        if((root==NULL)|| (root->left==NULL && root->right==NULL)){
             return;
         }
         if(root->right){
             traversalRight(root->right,ans);
         }
         else{
              traversalRight(root->left,ans);
         }
         ans.push_back(root->data);
    }
  //public:
    vector<int> boundaryTraversal(Node *root) {
        // code here
        vector<int> ans;
        if(root==NULL)
        {
            return {};
        }
        ans.push_back(root->data);
        traversalleft(root->left,ans);
        //left subtree
        traversalleaf(root->left,ans);
        //rightsubtree
        traversalleaf(root->right,ans);
        
        //right part
        traversalRight(root->right,ans);
        return ans;
    }
};
