#include <bits/stdc++.h> 
class CircularQueue{
    public:
    // Initialize your data structure.
    int*arr;
    int size;
    int front;
    int rear;
    CircularQueue(int n){
        // Write your code here.
        size=n;
        arr= new int[size];
        front=rear=-1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        // Write your code here.
       if ((front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1))) {
            // Queue is full
            return false;
        } else if (front == -1) {
            // First element to enqueue
            front = rear = 0;
        } else if (rear == size - 1 && front != 0) {
            // Wrap around
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = value;
        return true;
    }

    // Dequeue operation
    int dequeue() {
        if (front == -1) {
            // Queue is empty
            return -1; // Use -1 to signify empty queue
        }

        int ans = arr[front];
        arr[front] = -1; // Optional: Clear the dequeued position

        if (front == rear) {
            // Queue becomes empty
            front = rear = -1;
        } else if (front == size - 1) {
            // Wrap around
            front = 0;
        } else {
            front++;
        }
        return ans;
    }
};
